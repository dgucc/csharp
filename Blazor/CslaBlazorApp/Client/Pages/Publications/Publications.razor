@page "/Publications"

@using CslaBlazorApp.Shared
@using System.Net.Http.Headers

@inject HttpClient Http

@inject Csla.IDataPortal<CslaBlazorApp.Shared.Publications> publicationListPortal
@inject Csla.IDataPortal<Publication> publicationEditPortal
@inject Csla.Blazor.ViewModel<CslaBlazorApp.Shared.Publications> vm
@inject IStringLocalizer<SharedResources> Localize

<h1>@Localize["Publications.Title"]</h1>

<p class="alert-danger">@vm.ViewModelErrorText</p>

@if (vm.Model == null) {
	<p>Loading List...</p>
} else {
	<p>
		<a href="Publications/Add" class="btn btn-outline-primary"><i class="fa fa-plus"></i>&nbsp; @Localize["Publications.btn.Add"]</a>
	</p>
	<table class="table table-borderless table-striped table-hover">
		<thead>
			<tr>
				<th>@Localize["Publications.th.Id"]</th>
				<th>@Localize["Publication.th.Cover"]</th>
				<th>@Localize["Publications.th.ApprovalDate"]</th>
				<th>@Localize["Publications.th.PublishDate"]</th>
				<th>@Localize["Publications.th.Titles"]</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in vm.Model) {
				<tr style="max-height: 200px; overflow-y: scroll">
					<td>@item.Id</td>
					<td>
						<div>
							@if(item.Cover != null) {
								<img class="cover rounded" src=@string.Concat("data:image/jpg;base64,", Convert.ToBase64String(item.Cover)) />
							} else {
								<div class="fa-stack fa-lg" style="opacity:0.5;display:block;margin-left:30px">
									<i class="fa fa-camera fa-stack-1x"></i>
									<i class="fa fa-ban fa-stack-2x text-danger"></i>
								</div>
							<!-- Modal Dialog : UPLOAD PDF -->
							<button class="btn btn-outline-secondary" @onclick="OpenUploadModal">
								<i class="fa fa-upload" aria-hidden="true"></i>&nbsp;@Localize["Publication.Edit.Upload.Modal.btn.Show"]
							</button>

							<ModalUpload Title="Add a Cover" IsOpened="@isUploadOpened">
								<ModalBody>
									<h4>Upload Cover (JPG,PNG)</h4>
									<div class="form-control">
										<InputFile OnChange="OnInputFileChange" class="form-control" accept="jpg,png" @onclick="() => BrowserFile = null" />
										<div style=" margin: 5px;">
													@if (isLoading) {
												<p>Uploading...</p>
													} else {
														@if (BrowserFile != null) {
													<ul>
														<li>Name : @BrowserFile.Name</li>
														<li>Size (bytes) : @BrowserFile.Size</li>
														<li>Content type : @BrowserFile.ContentType</li>
														<li>Last modified : @BrowserFile.LastModified.ToString()</li>
													</ul>
														}
													}
										</div>
									</div>
									<div style=" margin: 5px;">
											<button class="btn btn-block btn-success" @onclick="async () => await UploadCover(item.Id)">
											<i class="fa fa-upload" aria-hidden="true"></i>&nbsp;@Localize["Publication.Edit.Upload.btn.Go"]
										</button>
										<br />
										<span>
													@if (!string.IsNullOrEmpty(UploadMessage)) {
														@UploadMessage
													}
										</span>
									</div>
								</ModalBody>
								<ModalFooter>
									<button class="btn btn-light " @onclick="() => isUploadOpened = false">@Localize["Publication.Edit.Upload.Modal.btn.Close"]</button>
								</ModalFooter>
							</ModalUpload>
							}
						</div>
					</td>
					<!-- Approval Date -->
					<td>@item.ApprovalDate.ToString("dd/MM/yyyy")</td>
					<!-- Publish Date -->
					<td>@(item.PublishDate.GetHashCode() == 0 ? "" : item.PublishDate.ToString("dd/MM/yyyy HH:mm"))</td>
					<!-- Titles -->
					<td style="overflow-y: auto;max-height: 160px;">
						<div style="width:auto;max-width:200px;">
							<span style="font-size:smaller;font-weight:bold;"><sup>FR</sup></span> @item.TitleFr<br />
							<span style="font-size:smaller;font-weight:bold;"><sup>NL</sup></span> @item.TitleNl<br />
							@*
							<span style="font-size:x-small;font-weight:bold;">DE</span> @item.TitleDe<br />
							<span style="font-size:x-small;font-weight:bold;">EN</span> @item.TitleEn
							*@
						</div>
					</td>
					<td>
						<!-- Edit -->
						<a href="Publications/Edit/@item.Id" >
							<button class="btn btn-outline-primary" ><i class="fa fa-edit"></i></button>
						</a>
						<!-- Delete -->
						<button class="btn btn-danger" @onclick="OpenModal" >
							<i class="fa fa-trash"></i>
						</button>

						<!-- Modal Dialog -->
						
						<ModalDialog Title=@Localize["Publications.Edit.Delete.Title"] IsOpened="isOpened">
							<ModalBody>								
								<h4>@Localize["Publications.Edit.Delete.Confirmation"]</h4>
								<div class="flex-container ">
									<div class="flex-item">
										<button class="btn btn-primary" @onclick="() => Delete(item.Id)">
											<i class="fa fa-check" aria-hidden="true"></i>&nbsp;@Localize["Publications.Edit.Delete.Yes"]
										</button>
									</div>
									<div class="flex-item">
										<button class="btn btn-secondary" @onclick="() => isOpened = false">
											<i class="fa fa-times" aria-hidden="true"></i>&nbsp;@Localize["Publications.Edit.Delete.No"]
										</button>
									</div>
								</div>
							</ModalBody>
							<ModalFooter>
								<button class="btn btn-light " @onclick="() => isOpened = false">@Localize["Publication.Edit.Delete.Modal.btn.Close"]</button>
							</ModalFooter>
						</ModalDialog>
						
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	protected override async Task OnParametersSetAsync() {
		await vm.RefreshAsync(() => publicationListPortal.FetchAsync());
		var temp = vm.Exception;
	}

	private async void Delete(int id) {
		isOpened = false;
		vm.Model = null;
		await publicationEditPortal.DeleteAsync(id);
		await vm.RefreshAsync(() => publicationListPortal.FetchAsync());
		StateHasChanged();
	}
	

	// Modal Dialog
	private bool isOpened {get; set;} = false;

	void OpenModal() {
		isOpened = true;
	}
	
	// Modal Upload
	bool isUploadOpened = false;
	void OpenUploadModal() {
		BrowserFile = null;
		isUploadOpened = true;
	}

	private IBrowserFile BrowserFile = null;
	private bool isLoading;
	private string UploadMessage = "";

	private void OnInputFileChange(InputFileChangeEventArgs e) {
		UploadMessage = "";
		BrowserFile = e.File;
		Console.WriteLine(e.File);
	}

	private async Task UploadCover(int publicationId) {
		if (BrowserFile == null) return;

		var fileContent = new StreamContent(BrowserFile.OpenReadStream(long.MaxValue));
		fileContent.Headers.ContentType = new MediaTypeHeaderValue(BrowserFile.ContentType);

		// Create the content
		var content = new MultipartFormDataContent();

		content.Add(
			content: fileContent,
			name: "\"image\"",
			fileName: BrowserFile.Name
		);

		// Extra Parameters
		content.Add(new StringContent(publicationId.ToString()), name: "publicationId");

		var request = await Http.PostAsync("api/PDF/upload/cover", content);
		string response = await request.Content.ReadAsStringAsync();
		UploadMessage = request.StatusCode + " : " + response;

		await vm.RefreshAsync(() => publicationListPortal.FetchAsync());
		StateHasChanged();

	}
}