@page "/Publications/Add"
@page "/Publications/Edit/{id}"

@using Csla.Blazor
@using CslaBlazorApp.Shared

@using System.Net.Http.Headers
@inject HttpClient Http
@inject IJSRuntime JS

@inject Csla.IDataPortal<Publication> publicationEditPortal
@inject Csla.IDataPortal<DocumentList> documentsPortal
@inject Csla.Blazor.ViewModel<Publication> vm
@inject Csla.Blazor.ViewModel<DocumentList> docvm
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResources> Localize

<h1>
	@if (vm.Model != null && vm.Model.IsNew) {
		<i class="fa fa-pencil" aria-hidden="true"></i>
		<span>@Localize["Publication.Add.Title"]</span>
	} else {
		<i class="fa fa-pencil" aria-hidden="true"></i>
		<span>@Localize["Publication.Edit.Title"]</span>
	}
</h1>


<p style="background-color:red;color:white">@vm.ViewModelErrorText</p>

@if (vm.Model == null) {
	<p>Loading Publication...</p>
} else {
	<p>
		<i class="fa fa-caret-left" aria-hidden="true"></i>
		<a href="publications">@Localize["Publication.Edit.btn.Back"]</a>
	</p>
	<EditForm Model="@vm.Model">
		@*<CslaValidator />*@
		<ValidationSummary>
			@vm.ViewModelErrorText
		</ValidationSummary>
		<table class="table table-borderless table-hover">
			<thead>
				<tr>
					<th></th>
					<th></th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				<!-- Id-->
				<tr>
					<td>Id</td>
					<td>@vm.Model.Id</td>
				</tr>
				<!-- Cover-->
				<tr>
					<td>
						<i class="fa fa-file-image-o" aria-hidden="true"></i>&nbsp;@Localize["Publication.th.Cover"]
					</td>
					<td>
						@if (@vm.Model.Cover != null) {
							<img class="cover rounded" src=@string.Concat("data:image/jpg;base64,", Convert.ToBase64String(@vm.Model.Cover)) height="150px"/>
						} else {
							<span class="fa-stack fa-lg" style="opacity:0.5">
								<i class="fa fa-camera fa-stack-1x"></i>
								<i class="fa fa-ban fa-stack-2x text-danger"></i>
							</span>
						}
					</td>
				</tr>
				<!-- ApprovalDate-->
				<tr>
					<td>
						<i class="fa fa-calendar-o" aria-hidden="true"></i>
						@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.ApprovalDate).FriendlyName)]
					</td>
					<td>
						<DateInput Property="@(vm.GetPropertyInfo(() => vm.Model.ApprovalDate))" EmptyIsMin="true" />
					</td>
				</tr>
				<!-- PublishDate-->
				<tr>
					<td>
						<i class="fa fa-calendar-o" aria-hidden="true"></i>
						@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.PublishDate).FriendlyName)]
					</td>
					<td>
						<DateTimePicker Property="@(vm.GetPropertyInfo(() => vm.Model.PublishDate))" @bind-DateAndTime="@vm.Model.PublishDate" UseNative="@false" IsDisabled="@false" />
					</td>
				</tr>
				<!-- RequestorEmail-->
				<tr>
					<td>
						<i class="fa fa-at" aria-hidden="true"></i>
						@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.RequestorEmail).FriendlyName)]
					</td>
					<td>
						<TextInput Property="@(vm.GetPropertyInfo(() => vm.Model.RequestorEmail))" />
					</td>
				</tr>
				<!-- TitleFr-->
				<tr>
					<td>@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.TitleFr).FriendlyName)]</td>
					<td>
						<TextAreaInput Property="@(vm.GetPropertyInfo(() => vm.Model.TitleFr))" ></TextAreaInput>
					</td>
				</tr>
				<!-- TitleNl-->
				<tr>
					<td>@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.TitleNl).FriendlyName)]</td>
					<td>
						<TextAreaInput Property="@(vm.GetPropertyInfo(() => vm.Model.TitleNl))" />
					</td>
				</tr>
				<!-- TitleDe-->
				<tr>
					<td>@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.TitleDe).FriendlyName)]</td>
					<td>
						<TextAreaInput Property="@(vm.GetPropertyInfo(() => vm.Model.TitleDe))" />
					</td>
				</tr>
				<!-- TitleEn-->
				<tr>
					<td>@Localize["Publication.Edit."+(vm.GetPropertyInfo(() => vm.Model.TitleEn).FriendlyName)]</td>
					<td>
						<TextAreaInput Property="@(vm.GetPropertyInfo(() => vm.Model.TitleEn))" />
					</td>
				</tr>
				<!-- PDFs-->
				<tr>
					<td>						
						<i class="fa fa-file-pdf-o" aria-hidden="true"></i>
						<span> #@docvm.Model?.Count =?= @vm.Model.Documents?.Count</span>
						@*<br/><span> #@vm.Model.Documents?.Count (vm)</span>*@
					</td>
					<td>
						<div class="flex-documents">
						@if (docvm.Model == null) {
							<p>No Documents...</p>
						} else {
							foreach (var item in docvm.Model){
								<div class="flex-documents-item">
									@if (item.Thumbnail != null) {
									<figure>
										<img class="cover rounded" src=@string.Concat("data:image/jpg;base64,", Convert.ToBase64String(@item.Thumbnail)) height="150px" alt="PDF"/>
												<figcaption>@Localize[@item.DocumentType.GetType().Name + "." + item.DocumentType.ToString()] - @Localize[@item.Language.GetType().Name + "." + item.Language.ToString()]</figcaption>
												
									</figure>
									} else {
										<span class="fa-stack fa-lg" style="opacity:0.5">
											<i class="fa fa-camera fa-stack-1x"></i>
											<i class="fa fa-ban fa-stack-2x text-danger"></i>
										</span>
									}
								</div>								
								} // foreach (var item in docvm.Model){
						}
						</div>
					</td>
					<td>
						<div style="margin:5px;">
							<!-- Modal Dialog : UPLOAD PDF -->
							<button class="btn btn-outline-secondary" @onclick="OpenUploadModal" disabled="@(vm.Model.IsNew)">
								<i class="fa fa-upload" aria-hidden="true"></i>&nbsp;@Localize["Publication.Edit.Upload.Modal.btn.Show"]
							</button>

							<ModalUpload Title=@Localize["Publication.Edit.Upload.PDF.Title"] IsOpened="@isUploadOpened">
								<ModalBody>
									<h4>Upload Documents (PDF)</h4>
									<div class="form-control">									
										<InputFile OnChange="OnInputFileChange" class="form-control" accept="pdf,PDF" @onclick="() => BrowserFile = null" />
										<div style=" margin: 5px;">
											@if (isLoading) {
												<p>Uploading...</p>
											} else {
												@if (BrowserFile != null) {
													<ul>
														<li>Name : @BrowserFile.Name</li>
														<li>Size (bytes) : @BrowserFile.Size</li>
														<li>Content type : @BrowserFile.ContentType</li>
														<li>Last modified : @BrowserFile.LastModified.ToString()</li>
													</ul>
												}
											}
										</div>
										<InputSelect @bind-Value="@uploadInfo.documentType" class="form-select">
											@foreach (var item in Enum.GetNames(typeof(EnumDocumentType))) {
												<option value="@item">@item</option>
											}
										</InputSelect>

										<InputSelect @bind-Value="@uploadInfo.lang" class="form-select">
											@foreach (var item in Enum.GetNames(typeof(EnumLanguageCode))) {
												<option value="@item">@item</option>
											}
										</InputSelect>
									</div>
									<div style=" margin: 15px;">
										<button class="btn btn-block btn-success" @onclick="async () => await UploadFileAsync()">
											<i class="fa fa-upload" aria-hidden="true"></i>&nbsp;@Localize["Publication.Edit.Upload.btn.Go"]
										</button>
										<br />
										<span>
											@if (!string.IsNullOrEmpty(UploadMessage)) {
												@UploadMessage
											}
										</span>
									</div>
								</ModalBody>
								<ModalFooter>
									<button class="btn btn-light " @onclick="() => isUploadOpened = false">@Localize["Publication.Edit.Upload.Modal.btn.Close"]</button>
								</ModalFooter>
							</ModalUpload>
						</div>
					</td>
				</tr>

			</tbody>
			<!-- BusinessBase Meta-Data-->
			<tfooter>
				<tr>
					<td>Is New ?</td>
					<td>
						@if (vm.Model.IsNew) {
							<i class="fa fa-check" aria-hidden="true" style="color:green;"></i>
						} else {
							<i class="fa fa-times" aria-hidden="true" style="color:red;"></i>
						}
					</td>
				</tr>
				<tr>
					<td>Is Modified ?</td>
					<td>
						@if (vm.Model.IsDirty) {
							<i class="fa fa-check" aria-hidden="true" style="color:green;"></i>
						} else {
							<i class="fa fa-times" aria-hidden="true" style="color:red;"></i>
						}
					</td>
				</tr>
				<tr>
					<td>Is Valid ?</td>
					<td>
					@if(vm.Model.BrokenRulesCollection.Count() > 0) {
							<i class="fa fa-times" aria-hidden="true" style="color:red;"></i>
					} else {
							<i class="fa fa-check" aria-hidden="true" style="color:green;"></i>
					} 
					</td>
				</tr>
				<tr>
					<td>Is Savable ?</td>
					<td>
						@if(vm.Model.IsSavable){
							<i class="fa fa-check" aria-hidden="true" style="color:green;"></i>
						} else {
							<i class="fa fa-times" aria-hidden="true" style="color:red;"></i>
						}
					</td>
				</tr>

			</tfooter>
		</table>
		<button class="btn btn-primary" @onclick="vm.SaveAsync" disabled="@(!vm.Model.IsSavable)">
			<i class="fa fa-floppy-o" aria-hidden="true"></i>
			@Localize["Publication.Edit.btn.Save"]
		</button>
	</EditForm>
}

@code {
	[Parameter]
	public string id { get; set; }

	protected override void OnInitialized() {
		vm.Saved += () => NavigationManager.NavigateTo("/publications");
		vm.ModelPropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
		docvm.ModelPropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
	}

	protected override async Task OnParametersSetAsync() {
		if (string.IsNullOrWhiteSpace(id)) {
			await vm.RefreshAsync(() => publicationEditPortal.CreateAsync());
			await docvm.RefreshAsync(() => documentsPortal.CreateAsync());
		} else {
			await vm.RefreshAsync(() => publicationEditPortal.FetchAsync(int.Parse(id)));
			await docvm.RefreshAsync(() => documentsPortal.FetchAsync(int.Parse(id)));
		}
	}

	// Modal Dialog
	bool isOpened = false;

	void OpenModal() {
		isOpened = true;
	}

	// Modal Upload
	bool isUploadOpened = false;
	void OpenUploadModal() {
		BrowserFile = null;
		isUploadOpened = true;
	}

	private IBrowserFile BrowserFile = null;
	private bool isLoading;
	private string UploadMessage = "";

	private void OnInputFileChange(InputFileChangeEventArgs e) {
		UploadMessage = "";
		BrowserFile = e.File;
		Console.WriteLine(e.File);
	}

	private async Task UploadFileAsync() {
		if (BrowserFile == null) return;

		var fileContent = new StreamContent(BrowserFile.OpenReadStream(long.MaxValue));
		fileContent.Headers.ContentType = new MediaTypeHeaderValue(BrowserFile.ContentType);

		// Create the content
		var content = new MultipartFormDataContent();

		content.Add(
			content: fileContent,
			name: "\"pdf\"",
			fileName: BrowserFile.Name
		);

		// Extra Parameters
		content.Add(new StringContent(id.ToString()), name: "publicationId");
		content.Add(new StringContent(uploadInfo.documentType), name: "documentType");
		content.Add(new StringContent(uploadInfo.lang), name: "lang");


		var request = await Http.PostAsync("api/PDF/upload", content);
		string response = await request.Content.ReadAsStringAsync();
		UploadMessage = request.StatusCode + " : " + response;

		//docvm.Saved += () => NavigationManager.NavigateTo("/publications");
		//docvm.ModelPropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
		//NavigationManager.NavigateTo("/publications/Edit/"+id);
		await docvm.RefreshAsync(() => documentsPortal.FetchAsync(int.Parse(id)));
	}

	public UploadInfo uploadInfo = new UploadInfo();

	public class UploadInfo{
		public string documentType { get; set; } = EnumDocumentType.Report.ToString();
		public string lang { get; set; } = EnumLanguageCode.French.ToString();
	}
	
}
